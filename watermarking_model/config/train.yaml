dataset: "librispeech"

adv: True

path:
#  raw_path: "/storage/seit-guohanqi/librispeech_dataset/LibriSpeech_wav"
  raw_path: "/home/yizhu/Data/LibriSpeech_wav"
  raw_path_test: "experiments/cloned_speechs"
  wm_speech: "./results/wm_speech"
  ckpt: "results/ckpt/"
  log_path: "results/log/"

watermark:
  length: 10
  delay_amt_second: 0.5
  future_amt_second: 0.5

optimize:
  lr: 0.00002
  lambda_e: 1.
  lambda_m: 10.
  # lambda_m: 0.01
  lambda_no_m: 0.01
  lambda_a: 0.01
  lambda_b: 1.
  batch_size: 4  # remote batch_size=4, local batch_size=2
  step_size: 5000 # large value means do not decay
  gamma: 0.98
  betas: [0.9, 0.98]
  eps: 0.000000001
  weight_decay: 0.0
  grad_clip_thresh: 1.0
  grad_acc_step: 1
  up_step: 4000
  anneal_steps: [300000, 400000, 500000]
  anneal_rate: 0.3
  lr_disc: 0.00002
  alpha: 10
  train_size: 31000

iter:
  epoch: 30
  # epoch: 100
  save_circle: 15
  show_circle: 1000
  val_circle: 1000
  data_divider: 1
  test_record_num: 100
  num_save_img: 10

# @package __global__

audio_effects:
  speed:
    sample_rate: ${sample_rate}
    speed_range: [0.8, 1.2]
  updownresample:
    sample_rate: ${sample_rate}
    intermediate_freq: 32000
  echo:
    sample_rate: ${sample_rate}
    volume_range: [0.1, 0.5]
    duration_range: [0.1, 0.5]
  random_noise:
    noise_std: 0.001
  pink_noise:
    noise_std: 0.01
  lowpass_filter:
    sample_rate: ${sample_rate}
    cutoff_freq: 5000
  highpass_filter:
    cutoff_freq: 500
    sample_rate: ${sample_rate}
  bandpass_filter:
    cutoff_freq_low: 300
    cutoff_freq_high: 8000
    sample_rate: ${sample_rate}
  smooth:
    window_size_range: [2, 10]
  boost_audio:
    amount: 20
  duck_audio:
    amount: 20
  mp3_compression:
    sample_rate: ${sample_rate}
    bitrate: 128k # should be a string e.g. "8k", "32k".. cf ffmpeg to see available bitrates
  aac_compression:
    sample_rate: ${sample_rate}
    bitrate: 128k # should be a string e.g. "8k", "32k".. cf ffmpeg to see available bitrates
    lowpass_freq: null # don't apply low pass freq to ffmpeg aac compression
  encodec:
    ckpt: "//pretrained/facebook/encodec_24khz"
    n_bandwidth: [3, 6, 12, 24]  # corresponds to n_qs [4, 8, 16, 32]

select_aug_mode:
  "use_eval" # other are 'all' and 'use_eval_acc', used to sample augmentations, `fixed` uses the prob from aug_weights, `all` uses all agmentations every step
  # `use_eval_acc` changes the weights based on the accuracies at evaluation time

aug_weights:
  speed: 0.1
  updownresample: 0.1
  echo: 0.1
  pink_noise: 0.1
  lowpass_filter: 0.1
  highpass_filter: 0.1
  bandpass_filter: 0.1
  smooth: 0.1
  boost_audio: 0.1
  duck_audio: 0.1
  mp3_compression: 0.1 # eval only never use in training even if eval_acc low
  aac_compression: 0.1 # eval only never use in training even if eval_acc low
  encodec: 0.1
  identity: 1 # no augmentation

n_max_aug: null

wandb:
  enabled: true  # Set to true to enable wandb logging
  project: "real-time-voice-watermark"
  name: "FullSet"
  key: "9a11e5364efe3bb8fedb3741188ee0d714e942e2"

